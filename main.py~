import uvicorn
from fastapi import FastAPI
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.middleware.cors import CORSMiddleware

from api_v1 import router as router_v1
from core.config import settings
from core.create_fasapi_app import create_app


async def add_security_headers(request, call_next):
    response = await call_next(request)

    # Установка безопасных заголовков
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    # response.headers["Content-Security-Policy"] = "default-src 'self'; script-src 'self' https://apis.example.com; style-src 'self' 'unsafe-inline';"

    return response


app: FastAPI = create_app(create_custom_static_urls=False)
# Добавляем middleware с безопасными заголовками
app.add_middleware(BaseHTTPMiddleware, dispatch=add_security_headers)

# Добавляем CORS middleware, если нужно
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost",  # Локальная разработка (если требуется)
        "http://127.0.0.1",
        "https://85.172.76.175",
        "https://85.172.111.36",
        "http://195.42.175",
    ],  # Укажите, какие домены могут делать запросы (безопаснее указать конкретные)
    # allow_origin_regex="http://195.42.175:[0-9]+", # Регулярное выражение для разрешения конкретных доменов
    allow_credentials=True,
    allow_methods=[
        "GET",
        "POST",
        # "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS",
    ],
    allow_headers=["*"],
)

app.include_router(router=router_v1, prefix=settings.api_v1_prefix)


if __name__ == "__main__":
    uvicorn.run(
        **(
            settings.uvicorn.uvicorn_dev_kwargs
            if settings.dev
            else settings.uvicorn.uvicorn_kwargs
        )
    )

    # https://habr.com/ru/articles/714570/
    # https://ya.zerocoder.ru/pgt-fastapi-realizaciya-paginacii-i-sortirovki-v-veb-sloe/
